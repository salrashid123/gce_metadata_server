load("@gazelle//:def.bzl", "gazelle")
load("@rules_go//go:def.bzl", "go_library", "go_test")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_image_index", "oci_push", "oci_tarball")
load("@rules_pkg//:pkg.bzl", "pkg_tar")

gazelle(name = "gazelle")
# gazelle:exclude examples

exports_files(["config.json"])

go_library(
    name = "go_default_library",
    srcs = ["server.go"],
    importpath = "github.com/salrashid123/gce_metadata_server",
    visibility = ["//visibility:public"],
    deps = [
        "@com_github_golang_glog//:go_default_library",
        "@com_github_salrashid123_oauth2_v3//:go_default_library",
        "@com_github_google_go_tpm//tpm2:go_default_library",
        "@com_github_google_go_tpm//tpm2/transport:go_default_library",
        "@com_github_gorilla_mux//:go_default_library",
        "@com_github_prometheus_client_golang//prometheus:go_default_library",
        "@com_github_prometheus_client_golang//prometheus/promauto:go_default_library",
        "@com_github_prometheus_client_golang//prometheus/promhttp:go_default_library",
        "@com_github_salrashid123_golang_jwt_tpm//:go_default_library",
        "@com_google_cloud_go_iam//credentials/apiv1:go_default_library",
        "@com_google_cloud_go_iam//credentials/apiv1/credentialspb:go_default_library",
        "@org_golang_google_api//idtoken:go_default_library",
        "@org_golang_google_api//impersonate:go_default_library",
        "@org_golang_x_oauth2//:go_default_library",
        "@org_golang_x_oauth2//google:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = ["server_test.go"],
    timeout = "short",    
    embed = [":go_default_library"],
    deps = [
        "@com_github_gorilla_mux//:go_default_library",
        "@com_google_cloud_go_compute_metadata//:go_default_library",
        "@org_golang_x_oauth2//:go_default_library",
        "@org_golang_x_oauth2//google:go_default_library",
    ],
)

platform(
    name = "linux_arm",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

platform(
    name = "linux_x86",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

alias(
    name = "linux_amd64",
    actual = ":linux_x86",
    visibility = ["//visibility:public"],
)

alias(
    name = "linux_arm64",
    actual = ":linux_arm",
    visibility = ["//visibility:public"],
)